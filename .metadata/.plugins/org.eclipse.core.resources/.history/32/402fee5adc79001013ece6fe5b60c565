package roundrobin;

import java.util.ArrayList;
import java.util.List;

import backbone.Attribute;
import backbone.CompetitiveUnit;
import backbone.Grouping;
import backbone.GroupingAttribute;
import backbone.IntAttribute;
import backbone.StringAttribute;
import backbone.Unit;

public class Team implements CompetitiveUnit {

	private Tournament _t;
	private StringAttribute _name;
	private IntAttribute _gamesWon;
	private IntAttribute _gamesLost;
	private GroupingAttribute<Player> _players;
	
	public Team(Tournament t, String name){
		_t = t;
		_name = new StringAttribute("Name", name);
		_gamesWon = new IntAttribute("Wins", 0);
		_gamesLost = new IntAttribute("Losses", 0);
		_players = new GroupingAttribute<Player>("Players", _t.getPlayers());
	}
	
	@Override
	public boolean deleteFromGrouping() {
		return _t.getTeams().deleteMember(this);
	}

	@Override
	public List<Attribute> getAttributes() {
		ArrayList<Attribute> atts = new ArrayList<Attribute>();
		atts.add(_name);
		atts.add(_gamesWon);
		atts.add(_gamesLost);
		atts.add(_players);
		return atts;
	}

	@Override
	public Grouping getMemberOf() {
		return _t.getTeams();
	}

	@Override
	public String getName() {
		return _name.value;
	}

	@Override
	public void setAttribute(Attribute attribute) {
		// TODO Auto-generated method stub

	}

	@Override
	public void setMemberOf(Grouping<Unit> g) {
		// TODO Auto-generated method stub

	}

	public void addPlayer(Player player) {
		if(!hasPlayer(player)){
			this._players.getMembers().add(player);
			player.setTeam(this);
		}
	}

	public boolean hasPlayer(Player player) {
		return this._players.getMembers().contains(player);
	}

}
