package roundrobin2;

import java.util.ArrayList;
import java.util.List;

import backbone.Attribute;
import backbone.Grouping;
import backbone.Pairing;
import backbone.Round;
import backbone.StringAttribute;
import backbone.Unit;
import backbone.UnitAttribute;

public class Game implements Pairing {

	private Turn _t;
	private Round _r;
	private final int _roundNum;
	
	private StringAttribute _name;
	private UnitAttribute<Field> _location;
	private UnitAttribute<Team> _homeTeam;
	private UnitAttribute<Team> _awayTeam;
	private UnitAttribute<Referee> _headRef;
	private UnitAttribute<Referee> _assistantRef;
	
	public Game(Turn t, Round r, String name){
		_r = r;
		_t = t;
		_roundNum = t.getRounds().indexOf(r);
		_name = new StringAttribute("Name", name);
		_location = new UnitAttribute<Field>("Location", null, _t.getFields());
		_homeTeam = new UnitAttribute<Team>("Home Team", null, _t.getTeams());
		_awayTeam = new UnitAttribute<Team>("Away Team", null, _t.getTeams());
		_headRef = new UnitAttribute<Referee>("Head Ref", null, _t.getRefs());
		_assistantRef = new UnitAttribute<Referee>("Assistant Ref", null, _t.getRefs());
	}
	
	public void setHome(Team homeTeam){
		TeamGrouping canFace = new TeamGrouping(_t, "Home Can Face");
		if(_homeTeam.att != null && _awayTeam.att != null){
			if(homeTeam == _homeTeam.att) return;
			_awayTeam.att.removeFacedTeam(_homeTeam.att);
		}
		for(Team t : _t.getTeams().getMembers()){
			if(t != homeTeam && !homeTeam.hasfacedBefore(t, _roundNum)){
				canFace.addMember(t);
			}
		}
		_awayTeam.setGrouping(canFace);
		_homeTeam = new UnitAttribute<Team>("Home Team", homeTeam, new TeamGrouping(_t, "Away can Face", _homeTeam.getListOfUnits()));
		if(_awayTeam.att != null) homeTeam.addFacedTeam(_awayTeam.att, _roundNum);
	}
	
	public void setField(Field f){
		UnitAttribute<Field> attr = new UnitAttribute<Field>("Location", f, _t.getFields());
		if(attr == null && _location.att != null){
			_headRef = new UnitAttribute<Referee>("Head Ref", null, _t.getRefs());
			_assistantRef = new UnitAttribute<Referee>("Assistant Ref", null, _t.getRefs());
		}else{
			if(_headRef.att.getField() != attr.att)
				_headRef = new UnitAttribute<Referee>("Head Ref", null, getPossibleRefs(attr.att));
			if(_assistantRef.att.getField() != attr.att)
				_assistantRef = new UnitAttribute<Referee>("Assistant Ref", null, getPossibleRefs(attr.att));
		}
		_location = attr;
	}
	
	public void setAway(Team awayTeam){
		TeamGrouping canFace = new TeamGrouping(_t, "Away Can Face");
		if(_homeTeam.att != null && _awayTeam.att != null){
			if(awayTeam == _awayTeam.att) return;
			_homeTeam.att.removeFacedTeam(_homeTeam.att);
		}
		for(Team t : _t.getTeams().getMembers()){
			if(t != awayTeam && !awayTeam.hasfacedBefore(t, _roundNum)){
				canFace.addMember(t);
			}
		}
		_homeTeam.setGrouping(canFace);
		_awayTeam = new UnitAttribute<Team>("Away Team", awayTeam, new TeamGrouping(_t, "Away can Face", _homeTeam.getListOfUnits()));
		if(_homeTeam.att != null) awayTeam.addFacedTeam(_homeTeam.att, _roundNum);
	}
	
	public void setHeadReferee(Referee ref){
		if(_location.att == null){
			_location = new UnitAttribute<Field>("Location", ref.getField(), _t.getFields());
		}
		if(_assistantRef.att == null || _assistantRef.att.getField() != _location.att){
			_assistantRef = new UnitAttribute<Referee>("Assistant Ref", null, getPossibleRefs(_location.att));
		}
		_headRef = new UnitAttribute<Referee>("Head Ref", ref, getPossibleRefs(_location.att));
	}
	
	public void setAssistantReferee(Referee ref){
		if(_location.att == null){
			_location = new UnitAttribute<Field>("Location", ref.getField(), _t.getFields());
		}
		if(_headRef.att == null || _headRef.att.getField() != _location.att){
			_headRef = new UnitAttribute<Referee>("Head Ref", null, getPossibleRefs(_location.att));
		}
		_assistantRef = new UnitAttribute<Referee>("Assistant Ref", ref, getPossibleRefs(_location.att));
	}
	@Override
	public boolean deleteFromGrouping() {
		if(_r == null) return false;
		else return _r.deleteMember(this);
	}

	@Override
	public List<Attribute> getAttributes() {
		ArrayList<Attribute> atts = new ArrayList<Attribute>();
		atts.add(_name);
		atts.add(_location);
		atts.add(_homeTeam);
		atts.add(_awayTeam);
		atts.add(_headRef);
		atts.add(_assistantRef);
		return atts;
	}

	@Override
	public Grouping getMemberOf() {
		return _r;
	}

	@Override
	public String getName() {
		return _name.value;
	}

	public RefereeGrouping getPossibleRefs(Field f){
		RefereeGrouping g = new RefereeGrouping(_t, "Possibilities");
		if(f == null){
			for(Referee r : _t.getRefs().getMembers())
				g.addMember(r);
			return g;
		}
		for(Referee r : _t.getRefs().getMembers()){
			if(r.getField() == f) g.addMember(r);
		}
		return g;
	}
	@Override
	public void setAttribute(Attribute attribute) {
		if(attribute.getType() == Attribute.Type.STRING){
			_name = (StringAttribute)attribute;
		}
		else if(attribute.getType() == Attribute.Type.UNIT){
			UnitAttribute att = (UnitAttribute)attribute;
			String title = att.getTitle();
			if(title.equals("Location")){
				UnitAttribute<Field> attr = (UnitAttribute<Field>)att;
				if(attr == null && _location.att != null){
					_headRef = new UnitAttribute<Referee>("Head Ref", null, _t.getRefs());
					_assistantRef = new UnitAttribute<Referee>("Assistant Ref", null, _t.getRefs());
				}else{
					if(_headRef.att.getField() != attr.att)
						_headRef = new UnitAttribute<Referee>("Head Ref", null, getPossibleRefs(attr.att));
					if(_assistantRef.att.getField() != attr.att)
						_assistantRef = new UnitAttribute<Referee>("Assistant Ref", null, getPossibleRefs(attr.att));
				}
				_location = attr;
			}
			else if(title.equals("Home Team")){
				setHome((Team)att.att);
				
			}
			else if(title.equals("Away Team")){
				setAway((Team)att.att);
			}
			else if(title.equals("Head Ref")){
				Referee ref = (Referee)att.att;
				if(_location.att == null){
					_location = new UnitAttribute<Field>("Location", ref.getField(), _t.getFields());
				}
				if(_assistantRef.att == null || _assistantRef.att.getField() != _location.att){
					_assistantRef = new UnitAttribute<Referee>("Assistant Ref", null, getPossibleRefs(_location.att));
				}
				_headRef = new UnitAttribute<Referee>("Head Ref", ref, getPossibleRefs(_location.att));
			}
			else if(title.equals("Assistant Ref")){
				Referee ref = (Referee)att.att;
				setAssistantRef(ref);
			}
		}

	}

	@Override
	public void setMemberOf(Grouping<Unit> g) {
	}

	@Override
	public void setName(String name) {
		this._name = new StringAttribute("Name", name);
		
	}

}
