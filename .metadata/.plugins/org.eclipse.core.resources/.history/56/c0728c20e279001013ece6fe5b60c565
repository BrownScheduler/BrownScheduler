package roundrobin;

import java.util.ArrayList;
import java.util.List;

import backbone.Attribute;
import backbone.Grouping;
import backbone.Pairing;
import backbone.Round;
import backbone.StringAttribute;
import backbone.Unit;
import backbone.UnitAttribute;

public class Game implements Pairing {

	Tournament _t;
	Round _r;
	int roundNum;
	
	StringAttribute _name;
	UnitAttribute<Field> _location;
	UnitAttribute<Team> _homeTeam;
	UnitAttribute<Team> _awayTeam;
	UnitAttribute<Referee> _headRef;
	UnitAttribute<Referee> _assistantRef;
	
	public Game(Tournament t, Round r, String name, Field field){
		_r = r;
		_t = t;
		roundNum = t.getRounds().indexOf(r);
		_name = new StringAttribute("Name", name);
		_location = new UnitAttribute<Field>("Location", field, _t.getFields());
		_homeTeam = new UnitAttribute<Team>("Home Team", null, _t.getTeams());
		_awayTeam = new UnitAttribute<Team>("Away Team", null, _t.getTeams());
		RefereeGrouping possibleRefs;
		if(_location == null) possibleRefs = new RefereeGrouping(_t, "Possibilities");
		else possibleRefs = _location.att.ref();
		_headRef = new UnitAttribute<Referee>("Head Ref", null, possibleRefs);
		_assistantRef = new UnitAttribute<Referee>("Assistant Ref", null, possibleRefs);
	}
	@Override
	public boolean deleteFromGrouping() {
		if(_r == null) return false;
		else return _r.deleteMember(this);
	}

	@Override
	public List<Attribute> getAttributes() {
		ArrayList<Attribute> atts = new ArrayList<Attribute>();
		atts.add(_name);
		atts.add(_location);
		atts.add(_homeTeam);
		atts.add(_awayTeam);
		atts.add(_headRef);
		atts.add(_assistantRef);
		return atts;
	}

	@Override
	public Grouping getMemberOf() {
		return _r;
	}

	@Override
	public String getName() {
		return _name.value;
	}

	@Override
	public void setAttribute(Attribute attribute) {
		if(attribute.getType() == Attribute.Type.STRING){
			_name = (StringAttribute)attribute;
		}
		else if(attribute.getType() == Attribute.Type.UNIT){
			UnitAttribute att = (UnitAttribute)attribute;
			String title = att.getTitle();
			if(title.equals("Location")) _location = att;
			else if(title.equals("Home Team")){
				_homeTeam = att;
				TeamGrouping canFace = new TeamGrouping(_t, "Home Can Face");
				for(Team t : _t.getTeams().getMembers()){
					if(t != _homeTeam.att && !_homeTeam.att.hasfacedBefore(t, roundNum)){
						canFace.addMember(t);
					}
				}
				_awayTeam.setGrouping(canFace);
				
			}
			else if(title.equals("Away Team")){
				_awayTeam = att;
				TeamGrouping canFace = new TeamGrouping(_t, "Away Can Face");
				for(Team t : _t.getTeams().getMembers()){
					if(t != _awayTeam.att && !_awayTeam.att.hasfacedBefore(t, this.roundNum)){
						canFace.addMember(t);
					}
				}
				_homeTeam.setGrouping(canFace);
			}
			else if(title.equals("Head Ref")) _headRef = att;
			else if(title.equals("Assistant Ref")) _assistantRef = att;
		}

	}

	@Override
	public void setMemberOf(Grouping<Unit> g) {
	}

}
