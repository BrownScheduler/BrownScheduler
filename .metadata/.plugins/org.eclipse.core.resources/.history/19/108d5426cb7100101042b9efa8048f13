package plugin1;

import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;

import backbone.*;
import backbone.Pairing;

public class Tourney extends backbone.Tournament{
	
	private ArrayList<plugin1.Round> rounds;
	private LinkedList<Team> competitors;
	private LinkedList<Team> judges;
	private int totalRounds;

	public Collection<CompetitiveUnit> getCompetitors() {
		LinkedList<CompetitiveUnit> t = new LinkedList<CompetitiveUnit>();
		t.addAll(competitors);
		return t;
	}
	
	@Override
	public Round getCurrentRound() {
		if(rounds == null){
			rounds = new ArrayList<Round>();
			rounds.add(new Round(1));
		}
		int r = rounds.size() - 1;
		plugin1.Round currRound = rounds.get(r);
		if(currRound != null){
			if(!currRound.isFinished() || currRound.getRoundNum() >= totalRounds){
				return currRound;
			}
			else{
				Round nextRound = new Round(r + 1);
				rounds.add(nextRound);
				return nextRound;
			}
		}
		return null;
	}

	public Collection<Category> getCategories() {
		return null;
	}
	
	@Override
	public Collection<backbone.Round<Pairing>> getRounds() {
		LinkedList<backbone.Round<Pairing>> rs = new LinkedList<backbone.Round<Pairing>>();
		rs.addAll(rounds);
		return rs;
	}
}
