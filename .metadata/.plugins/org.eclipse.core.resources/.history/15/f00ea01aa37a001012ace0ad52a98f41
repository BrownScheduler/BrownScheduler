package roundrobin2;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Random;


public class ConstraintHandler {

	private Turn _t;
	private int _roundNum;
	private Round _r;
	public ConstraintHandler(Turn tournament, int roundNum) {
		_t = tournament;
		_roundNum = roundNum;
	}

	public Round createRound() {
		_r = new Round(_t, "Round " + Integer.toString(_roundNum), _roundNum);
		Random rand = new Random();
		int offset = 0;
		HashSet<Team> paired = new HashSet<Team>();
		LinkedList<Team> unpaired = new LinkedList<Team>(_t.getTeams().getMembers());
		Collections.shuffle(unpaired);
		int i = 1;
		while(!unpaired.isEmpty()){
			_r.addGame(getNextPairing(unpaired), i++);
		}
		return _r;
	}
	
	public Game getNextPairing(LinkedList<Team> unpaired, int number){
		Team t1 = unpaired.pop();
		Team t2 = null;
		for(Team t : unpaired){
			if(!t1.hasfacedBefore(t, _roundNum)){
				t2 = t;
				t1.addFacedTeam(t2, _roundNum);
				break;
			}
		}
		
		return null;
	}

}
