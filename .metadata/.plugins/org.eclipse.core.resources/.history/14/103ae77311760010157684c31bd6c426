package plugin1;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.PriorityQueue;

public class ConstraintHandler {

	private ArrayList<Team> _teams;
	private ArrayList<Judge> _judges;
	private boolean _hasIssue;
	
	private class TeamComparer implements Comparator{

		@Override
		public int compare(Object arg0, Object arg1) {
			return ((Team)arg0).getWins() - ((Team)arg1).getWins();
		}
	}
	public ConstraintHandler(ArrayList<Team> teams, ArrayList<Judge> judges){
		this._teams = new ArrayList<Team>(teams);
		this._judges = new ArrayList<Judge>(judges);
	}
	
	private ArrayList<Team> sortTeamsByWins(){
		PriorityQueue<TeamComparer> q = new PriorityQueue<TeamComparer>(this._teams);
		for(Team t : this._teams){
			q.add(new TeamComparer(t));
		}
		ArrayList<Team> l = new ArrayList<Team>();
		while(!q.isEmpty())
			l.add(q.remove()._t);
		return l;
	}
	
	private ArrayList<MyPairing> judgeLessPairings(){
		
		ArrayList<MyPairing> pairs = new ArrayList<MyPairing>();
		ArrayList<Team> ts = sortTeamsByWins();
		
		
		return null;
	}
	
	public MyRound createNewRound(){
		return null;
	}
	
	public boolean enoughJudges(){
		return _judges.size() >= _teams.size() / 2;
	}
}
